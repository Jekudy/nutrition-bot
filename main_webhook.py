"""
Nutrition Bot V2 - Webhook –≤–µ—Ä—Å–∏—è –¥–ª—è Railway deployment
"""
import os
import asyncio
from typing import Dict, Any
from datetime import datetime, date
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from flask import Flask, request
import threading

# –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π –±–æ—Ç–∞
from adapters.database_factory import get_database_adapter
from adapters.openai_client import OpenAIClient
from services.photo_analyzer import PhotoAnalyzer
from services.nutrition_tracker import NutritionTracker
from services.daily_planner import DailyPlanner
from services.daily_reporter import DailyReporter
from services.scheduler import Scheduler
from shared.cloud_logger import get_logger, setup_flask_logging
from shared.models import UserProfile

logger = get_logger(__name__)

class NutritionBotWebhook:
    """Webhook –≤–µ—Ä—Å–∏—è Nutrition Bot –¥–ª—è –æ–±–ª–∞—á–Ω–æ–≥–æ –¥–µ–ø–ª–æ—è"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        self._check_environment()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–∞–ø—Ç–µ—Ä–æ–≤
        self.db = get_database_adapter()
        self.openai = OpenAIClient()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
        self.photo_analyzer = PhotoAnalyzer(self.openai, self.db)
        self.nutrition_tracker = NutritionTracker(self.db)
        self.daily_planner = DailyPlanner(self.openai, self.db)
        self.daily_reporter = DailyReporter(self.openai, self.db)
        self.scheduler = Scheduler()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –±–æ—Ç–∞
        self.token = os.getenv('TELEGRAM_BOT_TOKEN')
        self.webhook_url = os.getenv('WEBHOOK_URL', 'https://your-app.railway.app')
        self.port = int(os.getenv('PORT', 8000))
        
        # –°–æ–∑–¥–∞–µ–º Telegram Application
        self.application = Application.builder().token(self.token).build()
        self._setup_handlers()
        
        # Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è webhook
        self.app = Flask(__name__)
        setup_flask_logging()  # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ Flask
        self._setup_flask_routes()
        
        logger.info("‚úÖ Nutrition Bot V2 (Webhook) –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _check_environment(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        required_vars = ['TELEGRAM_BOT_TOKEN', 'OPENAI_API_KEY']
        missing_vars = [var for var in required_vars if not os.getenv(var)]
        
        if missing_vars:
            raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
        
        logger.info("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã")
    
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        # –ö–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.handle_start))
        self.application.add_handler(CommandHandler("daily_report", self.handle_daily_report))
        self.application.add_handler(CommandHandler("daily_plan", self.handle_daily_plan))
        self.application.add_handler(CommandHandler("stats", self.handle_stats))
        self.application.add_handler(CommandHandler("help", self.handle_help))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        self.application.add_handler(MessageHandler(filters.PHOTO, self.handle_photo))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text))
    
    def _setup_flask_routes(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Flask –º–∞—Ä—à—Ä—É—Ç–æ–≤"""
        
        @self.app.route("/", methods=['GET'])
        def health_check():
            """Health check endpoint –¥–ª—è Railway"""
            return {
                "status": "healthy",
                "service": "nutrition-bot-webhook",
                "timestamp": datetime.now().isoformat(),
                "version": "2.0"
            }
        
        @self.app.route("/webhook", methods=['POST'])
        def webhook():
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç Telegram"""
            try:
                json_data = request.get_json()
                if json_data:
                    update = Update.de_json(json_data, self.application.bot)
                    asyncio.run(self.application.process_update(update))
                return "OK"
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
                return "ERROR", 500
    
    async def handle_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º")
        
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await self.db.get_or_create_user(user.id, user.username, user.first_name)
        
        welcome_message = """
üçé <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Nutrition Bot!</b>

–Ø –ø–æ–º–æ–≥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–∞—à—É –ø–∏—â–µ–≤—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å:

üì∏ <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã</b> - –ø–æ–ª—É—á–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –∫–∞–ª–æ—Ä–∏–π –∏ –º–∞–∫—Ä–æ—Å–æ–≤
üìä <b>/stats</b> - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å –∏ –Ω–µ–¥–µ–ª—é  
üìÖ <b>/daily_plan</b> - –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
üìã <b>/daily_report</b> - –æ—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å
‚ùì <b>/help</b> - –ø–æ–º–æ—â—å

<i>–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–π –µ–¥—ã, –∏ —è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –µ—ë –ø–∏—â–µ–≤—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å!</i>
"""
        
        await update.message.reply_text(welcome_message, parse_mode='HTML')
    
    async def handle_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –µ–¥—ã"""
        user_id = update.effective_user.id
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
        processing_message = await update.message.reply_text(
            "üîç <b>–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é...</b>\n\n"
            "‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥",
            parse_mode='HTML'
        )
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
            photo = update.message.photo[-1]  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
            file = await context.bot.get_file(photo.file_id)
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –≤ –±–∞–π—Ç—ã
            photo_bytes = await file.download_as_bytearray()
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ç–æ
            analysis = await self.photo_analyzer.analyze_food_photo(user_id, photo_bytes)
            
            if analysis:
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                result_message = self._format_analysis_result(analysis)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await processing_message.edit_text(result_message, parse_mode='HTML')
                
                logger.info(f"–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
                
            else:
                await processing_message.edit_text(
                    "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é</b>\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                    "‚Ä¢ –°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ –ø—Ä–∏ –ª—É—á—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏\n"
                    "‚Ä¢ –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –µ–¥–∞ —Ö–æ—Ä–æ—à–æ –≤–∏–¥–Ω–∞\n"
                    "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ",
                    parse_mode='HTML'
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
            await processing_message.edit_text(
                "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –µ—â–µ —Ä–∞–∑",
                parse_mode='HTML'
            )
    
    async def handle_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stats"""
        user_id = update.effective_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        daily_stats = await self.nutrition_tracker.get_daily_progress(user_id)
        weekly_stats = await self.nutrition_tracker.get_weekly_progress(user_id)
        
        message_parts = [
            "üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∏—Ç–∞–Ω–∏—è</b>\n",
            "üìÖ <b>–°–µ–≥–æ–¥–Ω—è:</b>",
            self._format_daily_stats(daily_stats),
            "\nüìà <b>–ó–∞ –Ω–µ–¥–µ–ª—é:</b>",
            self._format_weekly_stats(weekly_stats)
        ]
        
        message = "\n".join(message_parts)
        await update.message.reply_text(message, parse_mode='HTML')
    
    async def handle_daily_report(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /daily_report"""
        user_id = update.effective_user.id
        
        report = await self.daily_reporter.generate_daily_report(user_id)
        
        if report:
            message = f"üìã <b>–û—Ç—á–µ—Ç –∑–∞ {report.date.strftime('%d.%m.%Y')}</b>\n\n{report.report_message}"
        else:
            message = "üìã <b>–û—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è</b>\n\n–î–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ. –î–æ–±–∞–≤—å—Ç–µ –∑–∞–ø–∏—Å–∏ –æ –ø—Ä–∏–µ–º–∞—Ö –ø–∏—â–∏!"
        
        await update.message.reply_text(message, parse_mode='HTML')
    
    async def handle_daily_plan(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /daily_plan"""
        user_id = update.effective_user.id
        
        plan = await self.daily_planner.generate_daily_plan(user_id)
        
        if plan:
            message = f"üìÖ <b>–ü–ª–∞–Ω –Ω–∞ {plan.date.strftime('%d.%m.%Y')}</b>\n\n{plan.plan_message}"
        else:
            message = "üìÖ <b>–ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è</b>\n\n–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!"
        
        await update.message.reply_text(message, parse_mode='HTML')
    
    async def handle_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_message = """
üçé <b>Nutrition Bot - –ü–æ–º–æ—â—å</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã - –ø–æ–ª—É—á–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –∫–∞–ª–æ—Ä–∏–π –∏ –º–∞–∫—Ä–æ—Å–æ–≤
üìä /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å –∏ –Ω–µ–¥–µ–ª—é
üìÖ /daily_plan - –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è  
üìã /daily_report - –æ—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å
‚ùì /help - —ç—Ç–∞ –ø–æ–º–æ—â—å

<b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>
1. –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –≤–∞—à—É –µ–¥—É
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –±–æ—Ç—É
3. –ü–æ–ª—É—á–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–∏—â–µ–≤–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏
4. –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å —á–µ—Ä–µ–∑ /stats

<b>–°–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:</b>
‚Ä¢ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –ø—Ä–∏ —Ö–æ—Ä–æ—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏
‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –µ–¥–∞ —Ö–æ—Ä–æ—à–æ –≤–∏–¥–Ω–∞
‚Ä¢ –í–∫–ª—é—á–∞–π—Ç–µ –≤ –∫–∞–¥—Ä –≤—Å—é –ø–æ—Ä—Ü–∏—é

<i>–ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ò–ò –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞, –ø–æ—ç—Ç–æ–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–≥—É—Ç –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π.</i>
"""
        
        await update.message.reply_text(help_message, parse_mode='HTML')
    
    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        await update.message.reply_text(
            "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "/help - –ø–æ–º–æ—â—å",
            parse_mode='HTML'
        )
    
    def _format_analysis_result(self, analysis):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞"""
        confidence_emoji = "üéØ" if analysis.confidence > 0.8 else "üé≤" if analysis.confidence > 0.6 else "‚ùì"
        
        message_lines = [
            f"{confidence_emoji} <b>–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!</b>",
            "",
            f"üçΩÔ∏è <b>–ö–∞–ª–æ—Ä–∏–∏:</b> {analysis.total_calories:.0f} –∫–∫–∞–ª",
            f"ü•© <b>–ë–µ–ª–∫–∏:</b> {analysis.total_protein:.1f} –≥", 
            f"üçû <b>–£–≥–ª–µ–≤–æ–¥—ã:</b> {analysis.total_carbs:.1f} –≥",
            f"üßà <b>–ñ–∏—Ä—ã:</b> {analysis.total_fat:.1f} –≥",
            f"üåæ <b>–ö–ª–µ—Ç—á–∞—Ç–∫–∞:</b> {analysis.total_fiber:.1f} –≥",
            ""
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã –µ—Å–ª–∏ –µ—Å—Ç—å
        if analysis.berries_grams > 0:
            message_lines.append(f"ü´ê <b>–Ø–≥–æ–¥—ã:</b> {analysis.berries_grams:.0f} –≥")
        if analysis.vegetables_grams > 0:
            message_lines.append(f"ü•¨ <b>–û–≤–æ—â–∏:</b> {analysis.vegetables_grams:.0f} –≥")
        if analysis.nuts_grams > 0:
            message_lines.append(f"ü•ú <b>–û—Ä–µ—Ö–∏:</b> {analysis.nuts_grams:.0f} –≥")
        
        if any([analysis.berries_grams, analysis.vegetables_grams, analysis.nuts_grams]):
            message_lines.append("")
        
        message_lines.extend([
            f"<i>{analysis.explanation}</i>",
            "",
            f"üéØ <b>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</b> {analysis.confidence*100:.0f}%"
        ])
        
        return "\n".join(message_lines)
    
    def _format_daily_stats(self, stats):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        if not stats:
            return "üìä –î–∞–Ω–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è –ø–æ–∫–∞ –Ω–µ—Ç"
        
        return f"""üçΩÔ∏è <b>–ö–∞–ª–æ—Ä–∏–∏:</b> {stats.total_calories:.0f} –∫–∫–∞–ª
ü•© <b>–ë–µ–ª–∫–∏:</b> {stats.total_protein:.1f} –≥  
üçû <b>–£–≥–ª–µ–≤–æ–¥—ã:</b> {stats.total_carbs:.1f} –≥
üßà <b>–ñ–∏—Ä—ã:</b> {stats.total_fat:.1f} –≥
üåæ <b>–ö–ª–µ—Ç—á–∞—Ç–∫–∞:</b> {stats.total_fiber:.1f} –≥"""
    
    def _format_weekly_stats(self, stats):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–µ–¥–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        if not stats:
            return "üìà –î–∞–Ω–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é –ø–æ–∫–∞ –Ω–µ—Ç"
        
        return f"""üìä <b>–°—Ä–µ–¥–Ω–∏–µ –∑–∞ –¥–µ–Ω—å:</b> {stats.get('weekly_calories', 0)/7:.0f} –∫–∫–∞–ª
ü•¨ <b>–û–≤–æ—â–∏:</b> {stats.get('weekly_vegetables', 0):.0f} –≥
ü´ê <b>–Ø–≥–æ–¥—ã:</b> {stats.get('weekly_berries', 0):.0f} –≥
ü•ú <b>–û—Ä–µ—Ö–∏:</b> {stats.get('weekly_nuts', 0):.0f} –≥"""

    async def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        await self.db.init_db()
    
    async def set_webhook(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç webhook –¥–ª—è Telegram"""
        webhook_url = f"{self.webhook_url}/webhook"
        
        try:
            await self.application.bot.set_webhook(webhook_url)
            logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")
            raise
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            asyncio.run(self.init_database())
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
            asyncio.run(self.set_webhook())
            
            logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {self.port}...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º Flask —Å–µ—Ä–≤–µ—Ä
            self.app.run(host='0.0.0.0', port=self.port, debug=False)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ webhook —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            raise

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è Railway
def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è webhook –≤–µ—Ä—Å–∏–∏"""
    bot = NutritionBotWebhook()
    bot.run()

if __name__ == "__main__":
    main()
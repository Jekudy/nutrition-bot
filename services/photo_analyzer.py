"""
Photo Analyzer Service: —Ñ–æ—Ç–æ + –ø—Ä–æ–º–ø—Ç ‚Üí OpenAI Structured Outputs
"""
from typing import Optional, Dict, Any
from shared.logger import get_logger
from shared.models import FoodAnalysisResult  # –°—Ç–∞—Ä–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
from shared.new_models import ProfessionalFoodAnalysis, DEFAULT_DAILY_TARGETS, calculate_percent_of_daily
from shared.prompt_manager import prompt_manager
from shared.utils import generate_meal_id, detect_eating_place
from adapters.openai_client import OpenAIClient

logger = get_logger(__name__)

class PhotoAnalyzer:
    """–ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –µ–¥—ã —á–µ—Ä–µ–∑ OpenAI Structured Outputs"""
    
    def __init__(self, openai_client: OpenAIClient):
        self.openai_client = openai_client
    
    async def analyze_food_photo_professional(self, photo_bytes: bytes, user_id: int) -> Optional[ProfessionalFoodAnalysis]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–æ—Ç–æ –µ–¥—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        
        Args:
            photo_bytes: –î–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            
        Returns:
            –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            meal_id = generate_meal_id()
            eating_place = detect_eating_place()
            daily_targets = DEFAULT_DAILY_TARGETS
            
            logger.info(f"üìã –ö–æ–Ω—Ç–µ–∫—Å—Ç: meal_id={meal_id}, eating_place={eating_place}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            prompt = prompt_manager.build_food_analysis_prompt(
                eating_place=eating_place,
                meal_id=meal_id,
                daily_targets=daily_targets
            )
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ structured output —Å ProfessionalFoodAnalysis
            result = await self.openai_client.analyze_image_professional(photo_bytes, prompt)
            
            if not result:
                logger.error(f"‚ùå OpenAI –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return None
            
            logger.info(f"‚úÖ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {result.totals.kcal} –∫–∫–∞–ª")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return None

    async def analyze_food_photo(self, photo_bytes: bytes, user_id: int) -> Optional[FoodAnalysisResult]:
        """
        LEGACY: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–æ—Ç–æ –µ–¥—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Å—Ç–∞—Ä–∞—è –º–æ–¥–µ–ª—å)
        
        Args:
            photo_bytes: –î–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            
        Returns:
            –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º legacy –∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            prompt = self._build_analysis_prompt()
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ structured output
            result = await self.openai_client.analyze_image_structured(photo_bytes, prompt)
            
            if not result:
                logger.error(f"OpenAI –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return None
            
            logger.info(f"–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {result.total_calories} –∫–∫–∞–ª")
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return None
    
    def _build_analysis_prompt(self) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ"""
        return """
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –µ–¥—ã –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ –µ—ë –ø–∏—â–µ–≤—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å.
        
        –¢–≤–æ—è –∑–∞–¥–∞—á–∞:
        1. –û–ø—Ä–µ–¥–µ–ª–∏ –≤—Å–µ –≤–∏–¥–∏–º—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏ –±–ª—é–¥–∞
        2. –û—Ü–µ–Ω–∏ –∏—Ö –≤–µ—Å/–æ–±—ä–µ–º –≤ –≥—Ä–∞–º–º–∞—Ö  
        3. –†–∞—Å—Å—á–∏—Ç–∞–π –∫–∞–ª–æ—Ä–∏–∏ –∏ –º–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã
        4. –û–ø—Ä–µ–¥–µ–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—è–≥–æ–¥—ã, –∫—Ä–∞—Å–Ω–æ–µ –º—è—Å–æ, –æ–≤–æ—â–∏ –∏ —Ç.–¥.)
        
        –ü—Ä–∏–Ω—Ü–∏–ø—ã –∞–Ω–∞–ª–∏–∑–∞:
        - –ü—Ä–∏ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏ –≤—ã–±–∏—Ä–∞–π –ë–û–õ–¨–®–£–Æ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        - –£—á–∏—Ç—ã–≤–∞–π —Å–ø–æ—Å–æ–± –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è (–∂–∞—Ä–∫–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–∞–ª–æ—Ä–∏–∏)
        - –î–ª—è —Å–æ—É—Å–æ–≤ –∏ –∑–∞–ø—Ä–∞–≤–æ–∫ –¥–æ–±–∞–≤–ª—è–π –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –∫–∞–ª–æ—Ä–∏–∏
        - –°–∫—Ä—ã—Ç—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã (–º–∞—Å–ª–æ, —Å–∞—Ö–∞—Ä) —Ç–æ–∂–µ —É—á–∏—Ç—ã–≤–∞–π
        
        –í–µ—Ä–Ω–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å:
        - –û–±—â–∏–º–∏ –∫–∞–ª–æ—Ä–∏—è–º–∏ –∏ –º–∞–∫—Ä–æ—Å–∞–º–∏
        - –°–ø–∏—Å–∫–æ–º –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        - –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ (—è–≥–æ–¥—ã, –º—è—Å–æ, –æ–≤–æ—â–∏)
        - –§–∞–∫—Ç–æ—Ä–∞–º–∏ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏
        - –û–±—ä—è—Å–Ω–µ–Ω–∏–µ–º –∞–Ω–∞–ª–∏–∑–∞
        
        –í–∞–∂–Ω–æ: –õ—É—á—à–µ –ø–µ—Ä–µ–æ—Ü–µ–Ω–∏—Ç—å –∫–∞–ª–æ—Ä–∏–∏, —á–µ–º –Ω–µ–¥–æ–æ—Ü–µ–Ω–∏—Ç—å!
        """
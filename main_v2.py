"""
Main V2: –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π Telegram –±–æ—Ç —Å –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
"""
import asyncio
import os
from telegram import Update
from telegram.ext import ContextTypes

# –ò–º–ø–æ—Ä—Ç—ã –∞–¥–∞–ø—Ç–µ—Ä–æ–≤
from adapters.telegram_bot import TelegramBot
from adapters.openai_client import OpenAIClient  
from adapters.database import DatabaseAdapter

# –ò–º–ø–æ—Ä—Ç—ã —Å–µ—Ä–≤–∏—Å–æ–≤
from services.photo_analyzer import PhotoAnalyzer
from services.nutrition_tracker import NutritionTracker
from services.daily_planner import DailyPlanner
from services.daily_reporter import DailyReporter
from services.scheduler import NotificationScheduler

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
from shared.logger import get_logger, LogCleaner

logger = get_logger(__name__)

class NutritionBotV2:
    """–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –±–æ—Ç —Å –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π"""
    
    def __init__(self):
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Nutrition Bot V2...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–¥–∞–ø—Ç–µ—Ä—ã
        self.telegram = TelegramBot()
        self.openai = OpenAIClient()
        self.db = DatabaseAdapter()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
        self.photo_analyzer = PhotoAnalyzer(self.openai)
        self.nutrition_tracker = NutritionTracker(self.db)
        self.daily_planner = DailyPlanner(self.openai, self.db)
        self.daily_reporter = DailyReporter(self.openai, self.db)
        self.scheduler = NotificationScheduler()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self._setup_handlers()
        
        logger.info("‚úÖ Nutrition Bot V2 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        # –ö–æ–º–∞–Ω–¥—ã
        self.telegram.add_command_handler("start", self.handle_start)
        self.telegram.add_command_handler("stats", self.handle_stats)
        self.telegram.add_command_handler("plan", self.handle_plan)
        self.telegram.add_command_handler("report", self.handle_report)
        self.telegram.add_command_handler("help", self.handle_help)
        
        # –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        self.telegram.add_photo_handler(self.handle_photo)
        
        # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.telegram.add_message_handler(self.handle_message)
        
        # Callback –∫–Ω–æ–ø–∫–∏
        self.telegram.add_callback_handler(self.handle_callback)
        
        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    async def handle_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            user_info = self.telegram.get_user_info(update)
            user_id = user_info["user_id"]
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await self.db.get_or_create_user(
                user_id=user_id,
                username=user_info["username"],
                first_name=user_info["first_name"]
            )
            
            welcome_text = f"""
üçé –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Nutrition Bot V2!

–ü—Ä–∏–≤–µ—Ç, {user_info['first_name']}! 

–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ:
üîç –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –µ–¥—É –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º  
üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏ –∏ –Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã
üìà –°–ª–µ–¥–∏—Ç—å –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –Ω–æ—Ä–º –ø–∏—Ç–∞–Ω–∏—è
üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Ü–∏–æ–Ω –Ω–∞ –¥–µ–Ω—å

üì∏ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —Å–≤–æ–µ–π –µ–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!

–ö–æ–º–∞–Ω–¥—ã:
/plan - –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å  
/report - –û—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å
/help - –ü–æ–º–æ—â—å
"""
            
            await self.telegram.send_message(
                chat_id=user_info["chat_id"],
                text=welcome_text
            )
            
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_start: {e}")
            await self._send_error_message(update, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞")
    
    async def handle_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –µ–¥—ã"""
        try:
            user_info = self.telegram.get_user_info(update)
            user_id = user_info["user_id"]
            chat_id = user_info["chat_id"]
            
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
            processing_msg = await self.telegram.send_message(
                chat_id=chat_id,
                text="üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –µ–¥—ã..."
            )
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            photo = update.message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
            photo_bytes = await self.telegram.get_file_bytes(photo.file_id)
            
            if not photo_bytes:
                await self.telegram.edit_message(
                    chat_id=chat_id,
                    message_id=processing_msg.message_id,
                    text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"
                )
                return
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é (–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥)
            analysis_result = await self.photo_analyzer.analyze_food_photo_professional(photo_bytes, user_id)
            
            if not analysis_result:
                await self.telegram.edit_message(
                    chat_id=chat_id,
                    message_id=processing_msg.message_id,
                    text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é"
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ë–î
            saved = await self.nutrition_tracker.save_food_analysis(user_id, analysis_result)
            
            if not saved:
                await self.telegram.edit_message(
                    chat_id=chat_id,
                    message_id=processing_msg.message_id,
                    text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö"
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –ø–∏—Ç–∞–Ω–∏—é
            progress = await self.nutrition_tracker.get_daily_progress(user_id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response_text = self._format_analysis_result(analysis_result, progress)
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
            buttons = [
                [
                    {"text": "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–Ω—è", "callback_data": "stats_day"},
                    {"text": "üìà –ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ–¥–µ–ª–∏", "callback_data": "stats_week"}
                ],
                [{"text": "üìÖ –ü–ª–∞–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞", "callback_data": "plan_tomorrow"}]
            ]
            keyboard = self.telegram.create_inline_keyboard(buttons)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
            await self.telegram.edit_message(
                chat_id=chat_id,
                message_id=processing_msg.message_id,
                text=response_text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            
            logger.info(f"–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_photo: {e}")
            await self._send_error_message(update, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")
    
    async def handle_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
        try:
            user_info = self.telegram.get_user_info(update)
            user_id = user_info["user_id"]
            
            progress = await self.nutrition_tracker.get_daily_progress(user_id)
            
            if not progress:
                await self.telegram.send_message(
                    chat_id=user_info["chat_id"],
                    text="üìä –î–∞–Ω–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è –ø–æ–∫–∞ –Ω–µ—Ç. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!"
                )
                return
            
            stats_text = self._format_daily_stats(progress)
            
            await self.telegram.send_message(
                chat_id=user_info["chat_id"],
                text=stats_text,
                parse_mode="HTML"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_stats: {e}")
            await self._send_error_message(update, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    
    async def handle_plan(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /plan"""
        try:
            user_info = self.telegram.get_user_info(update)
            user_id = user_info["user_id"]
            
            plan_message = await self.daily_planner.create_daily_plan(user_id)
            
            if not plan_message:
                plan_message = "üìÖ –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            
            await self.telegram.send_message(
                chat_id=user_info["chat_id"],
                text=plan_message,
                parse_mode="HTML"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_plan: {e}")
            await self._send_error_message(update, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞–Ω–∞")
    
    async def handle_report(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /report"""
        try:
            user_info = self.telegram.get_user_info(update)
            user_id = user_info["user_id"]
            
            report_message = await self.daily_reporter.generate_daily_report(user_id)
            
            if not report_message:
                report_message = "üìà –î–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ."
            
            await self.telegram.send_message(
                chat_id=user_info["chat_id"],
                text=report_message,
                parse_mode="HTML"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_report: {e}")
            await self._send_error_message(update, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞")
    
    async def handle_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üÜò <b>–ü–æ–º–æ—â—å –ø–æ Nutrition Bot V2</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/plan - –ü–æ–ª—É—á–∏—Ç—å –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ –¥–µ–Ω—å
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∏—Ç–∞–Ω–∏—è –∑–∞ –¥–µ–Ω—å
/report - –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

<b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>
üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–ª–æ—Ä–∏–π –∏ –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤
üìä –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å
üìÖ –ö–∞–∂–¥–æ–µ —É—Ç—Ä–æ –ø–æ–ª—É—á–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è
üìà –í–µ—á–µ—Ä–æ–º - –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å

<b>–ß—Ç–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–æ—Ç:</b>
‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏ –∏ –º–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã (–±–µ–ª–∫–∏, –∂–∏—Ä—ã, —É–≥–ª–µ–≤–æ–¥—ã)
‚Ä¢ –ö–ª–µ—Ç—á–∞—Ç–∫—É –∏ –º–∏–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã
‚Ä¢ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–µ–¥–µ–ª—å–Ω—ã–º –Ω–æ—Ä–º–∞–º –ø–∏—Ç–∞–Ω–∏—è
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Ä–∞—Ü–∏–æ–Ω–∞

üí° <b>–°–æ–≤–µ—Ç:</b> –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –≤—Å—é –µ–¥—É –¥–ª—è —Ç–æ—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!
"""
        
        await self.telegram.send_message(
            chat_id=self.telegram.get_user_info(update)["chat_id"],
            text=help_text,
            parse_mode="HTML"
        )
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        text = update.message.text.lower().strip()
        
        if any(word in text for word in ["–ø—Ä–∏–≤–µ—Ç", "hello", "hi", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π"]):
            await update.message.reply_text(
                "–ü—Ä–∏–≤–µ—Ç! üëã –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."
            )
        elif any(word in text for word in ["—Å–ø–∞—Å–∏–±–æ", "–±–ª–∞–≥–æ–¥–∞—Ä—é", "thanks"]):
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! üòä –†–∞–¥ –ø–æ–º–æ—á—å —Å –ø–∏—Ç–∞–Ω–∏–µ–º!")
        else:
            await update.message.reply_text(
                "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã /plan, /stats, /report"
            )
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫"""
        try:
            query = update.callback_query
            await query.answer()
            
            user_info = self.telegram.get_user_info(update)
            user_id = user_info["user_id"]
            
            if query.data == "stats_day":
                progress = await self.nutrition_tracker.get_daily_progress(user_id)
                if progress:
                    response = self._format_daily_stats(progress)
                else:
                    response = "üìä –î–∞–Ω–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è –ø–æ–∫–∞ –Ω–µ—Ç"
                    
                await query.edit_message_text(text=response, parse_mode="HTML")
                
            elif query.data == "stats_week":
                weekly_stats = await self.nutrition_tracker.get_weekly_progress(user_id)
                response = self._format_weekly_stats(weekly_stats)
                await query.edit_message_text(text=response, parse_mode="HTML")
                
            elif query.data == "plan_tomorrow":
                plan = await self.daily_planner.create_daily_plan(user_id)
                if plan:
                    await query.edit_message_text(text=plan, parse_mode="HTML")
                else:
                    await query.edit_message_text(text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_callback: {e}")
    
    def _format_analysis_result(self, analysis, progress):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –µ–¥—ã (auto-detect format)"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–æ–π —Ç–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–ª—É—á–∏–ª–∏
        if hasattr(analysis, 'totals') and hasattr(analysis, 'items'):
            # –≠—Ç–æ ProfessionalFoodAnalysis - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
            return self._format_professional_analysis(analysis, progress)
        else:
            # –≠—Ç–æ —Å—Ç–∞—Ä—ã–π FoodAnalysisResult - –∏—Å–ø–æ–ª—å–∑—É–µ–º legacy —Ñ–æ—Ä–º–∞—Ç
            return self._format_legacy_analysis(analysis, progress)
    
    def _format_professional_analysis(self, analysis, progress):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –µ–¥—ã"""
        result_lines = [
            "‚úÖ <b>–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!</b>",
            f"üÜî <code>{analysis.meal_id}</code>",
            "",
        ]
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã (—Ç–æ–ø-3 –ø–æ –∫–∞–ª–æ—Ä–∏—è–º)
        top_items = analysis.items[:3]
        if top_items:
            result_lines.append("üçΩÔ∏è <b>–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:</b>")
            for item in top_items:
                result_lines.append(f"‚Ä¢ {item.food} ({item.weight_g:.0f}–≥) - {item.kcal} –∫–∫–∞–ª")
            result_lines.append("")
        
        # –û–±—â–∏–µ –Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã —Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏
        result_lines.extend([
            "üìä <b>–ù—É—Ç—Ä–∏–µ–Ω—Ç—ã:</b>",
            f"üî• <b>–ö–∞–ª–æ—Ä–∏–∏:</b> {analysis.totals.kcal} –∫–∫–∞–ª ({analysis.percent_of_daily.kcal:.1f}%)",
            f"ü•© <b>–ë–µ–ª–∫–∏:</b> {analysis.totals.protein_g:.1f} –≥ ({analysis.percent_of_daily.protein_g:.1f}%)",
            f"üçû <b>–£–≥–ª–µ–≤–æ–¥—ã:</b> {analysis.totals.carb_g:.1f} –≥ ({analysis.percent_of_daily.carb_g:.1f}%)",
            f"üßà <b>–ñ–∏—Ä—ã:</b> {analysis.totals.fat_g:.1f} –≥ ({analysis.percent_of_daily.fat_g:.1f}%)",
            f"üåæ <b>–ö–ª–µ—Ç—á–∞—Ç–∫–∞:</b> {analysis.totals.fiber_g:.1f} –≥ ({analysis.percent_of_daily.fiber_g:.1f}%)",
        ])
        
        # –ú–∏–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞)
        micronutrients = []
        if analysis.totals.calcium_mg > 50:
            micronutrients.append(f"ü¶¥ –ö–∞–ª—å—Ü–∏–π: {analysis.totals.calcium_mg:.0f} –º–≥ ({analysis.percent_of_daily.calcium_mg:.1f}%)")
        if analysis.totals.iron_mg > 2:
            micronutrients.append(f"ü©∏ –ñ–µ–ª–µ–∑–æ: {analysis.totals.iron_mg:.1f} –º–≥ ({analysis.percent_of_daily.iron_mg:.1f}%)")
        if analysis.totals.omega3_g > 0.1:
            micronutrients.append(f"üêü –û–º–µ–≥–∞-3: {analysis.totals.omega3_g:.1f} –≥ ({analysis.percent_of_daily.omega3_g:.1f}%)")
        
        if micronutrients:
            result_lines.append("")
            result_lines.append("üß™ <b>–ú–∏–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã:</b>")
            result_lines.extend(micronutrients)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ –¥–µ–Ω—å (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if progress:
            result_lines.extend([
                "",
                "üìà <b>–°–µ–≥–æ–¥–Ω—è —Å—ä–µ–¥–µ–Ω–æ:</b>",
                f"–í—Å–µ–≥–æ –∫–∞–ª–æ—Ä–∏–π: {progress.total_calories:.0f} –∫–∫–∞–ª",
                f"–í—Å–µ–≥–æ –∫–ª–µ—Ç—á–∞—Ç–∫–∏: {progress.total_fiber:.0f} –≥"
            ])
        
        return "\n".join(result_lines)
    
    def _format_legacy_analysis(self, analysis, progress):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –µ–¥—ã (legacy format)"""
        result_lines = [
            "‚úÖ <b>–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!</b>",
            "",
            f"üçΩÔ∏è <b>–ö–∞–ª–æ—Ä–∏–∏:</b> {analysis.total_calories:.0f} –∫–∫–∞–ª",
            f"ü•© <b>–ë–µ–ª–∫–∏:</b> {analysis.total_protein:.1f} –≥",
            f"üçû <b>–£–≥–ª–µ–≤–æ–¥—ã:</b> {analysis.total_carbs:.1f} –≥", 
            f"üßà <b>–ñ–∏—Ä—ã:</b> {analysis.total_fat:.1f} –≥",
            f"üåæ <b>–ö–ª–µ—Ç—á–∞—Ç–∫–∞:</b> {analysis.total_fiber:.1f} –≥",
        ]
        
        if analysis.berries_grams > 0:
            result_lines.append(f"ü´ê <b>–Ø–≥–æ–¥—ã:</b> {analysis.berries_grams:.0f} –≥")
        if analysis.vegetables_grams > 0:
            result_lines.append(f"ü•¨ <b>–û–≤–æ—â–∏:</b> {analysis.vegetables_grams:.0f} –≥")
        if analysis.nuts_grams > 0:
            result_lines.append(f"ü•ú <b>–û—Ä–µ—Ö–∏:</b> {analysis.nuts_grams:.0f} –≥")
        
        if progress:
            result_lines.extend([
                "",
                "üìä <b>–ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ –¥–µ–Ω—å:</b>",
                f"–ö–∞–ª–æ—Ä–∏–∏: {progress.total_calories:.0f} / 2200 –∫–∫–∞–ª",
                f"–ö–ª–µ—Ç—á–∞—Ç–∫–∞: {progress.total_fiber:.0f} / 50 –≥"
            ])
        
        return "\n".join(result_lines)
    
    def _format_daily_stats(self, progress):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        if not progress:
            return "üìä –î–∞–Ω–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è –ø–æ–∫–∞ –Ω–µ—Ç"
        
        lines = [
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å</b>",
            "",
            f"üçΩÔ∏è <b>–ö–∞–ª–æ—Ä–∏–∏:</b> {progress.total_calories:.0f} –∫–∫–∞–ª",
            f"ü•© <b>–ë–µ–ª–∫–∏:</b> {progress.total_protein:.1f} –≥",
            f"üçû <b>–£–≥–ª–µ–≤–æ–¥—ã:</b> {progress.total_carbs:.1f} –≥",
            f"üßà <b>–ñ–∏—Ä—ã:</b> {progress.total_fat:.1f} –≥",
            f"üåæ <b>–ö–ª–µ—Ç—á–∞—Ç–∫–∞:</b> {progress.total_fiber:.1f} –≥",
            "",
            f"ü´ê <b>–Ø–≥–æ–¥—ã:</b> {progress.berries_grams:.0f} –≥",
            f"ü•¨ <b>–û–≤–æ—â–∏:</b> {progress.vegetables_grams:.0f} –≥",
            f"ü•ú <b>–û—Ä–µ—Ö–∏:</b> {progress.nuts_grams:.0f} –≥"
        ]
        
        return "\n".join(lines)
    
    def _format_weekly_stats(self, stats):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–µ–¥–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        if not stats:
            return "üìà –î–∞–Ω–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é –ø–æ–∫–∞ –Ω–µ—Ç"
        
        lines = [
            "üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é</b>",
            "",
            f"ü´ê <b>–Ø–≥–æ–¥—ã:</b> {stats.get('weekly_berries', 0):.0f} / 175 –≥",
            f"ü•© <b>–ö—Ä–∞—Å–Ω–æ–µ –º—è—Å–æ:</b> {stats.get('weekly_red_meat', 0):.0f} / 700 –≥",
            f"üêü <b>–ú–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã:</b> {stats.get('weekly_seafood', 0):.0f} –≥",
            f"ü•ú <b>–û—Ä–µ—Ö–∏:</b> {stats.get('weekly_nuts', 0):.0f} –≥",
            f"ü•¨ <b>–û–≤–æ—â–∏:</b> {stats.get('weekly_vegetables', 0):.0f} –≥"
        ]
        
        return "\n".join(lines)
    
    async def _send_error_message(self, update: Update, error_text: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            user_info = self.telegram.get_user_info(update)
            await self.telegram.send_message(
                chat_id=user_info["chat_id"],
                text=f"‚ùå {error_text}"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        try:
            logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await self.db.init_db()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫—É –ª–æ–≥–æ–≤
            await LogCleaner.cleanup_old_logs()
            
            logger.info("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            raise
    
    def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ Nutrition Bot V2...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ) - –æ–Ω —Å–∞–º —Å–æ–∑–¥–∞—Å—Ç event loop
            self.telegram.run_polling()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            raise
    
    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
        try:
            logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            await self.openai.close()
            await self.db.close()
            
            logger.info("‚úÖ –ë–æ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã: {e}")

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    bot = NutritionBotV2()
    bot.start()

if __name__ == "__main__":
    main()